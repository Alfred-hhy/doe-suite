# - if running is empty: setup new experiment
#
- assert:
    that:
    - exp_job_ids_running is defined
    - experiments_ext is defined
    - run_id is defined
    - exp_check_wait_time is defined

- debug:
    var: exp_job_ids_running
- debug:
    var: experiments_ext
- debug:
    var: run_id
- debug:
    var: exp_check_wait_time



##########################################################################
#   Setup next (new) experiment run                                      #
##########################################################################

- name: 
  set_fact:
    new_running_job_id: null

- name: 
  set_fact:
    new_running_job_id: "{{ exp_job_ids_pending | list | map('int')| min }}"
  when: exp_job_ids_running | length == 0 and exp_job_ids_unfinished | length > 0

- debug:
    msg="new_running_job_id={{ new_running_job_id }}"

- name:
  set_fact:
    exp_job_ids_pending: "{{ exp_job_ids_pending | reject('equalto', exp_running_job_id | int) | list }}"
    exp_job_ids_running: "{{ new_running_job_id | map('int') | list }}"
  when: new_running_job_id is not none 

- name: Set the experiment config
  set_fact:
    exp_config: "{{ experiments_ext[exp_job_ids_running | list | first | int] }}"
    running_job_id: "{{ exp_job_ids_running[0] }}"
  when: exp_job_ids_unfinished | length > 0


- name: Set logs path
  set_fact:
    logs_dir: "{{ exp.log_dir }}/{{ run_id }}/{{ running_job_id }}"

 

##########################################################################
#   Start a new experiment (as a service -> does not block)              #
##########################################################################

- name: Start new experiment (if there is no running atm)
  include_role:
    name: experiment-job-start
  when: new_running_job_id is not none


##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save
  when: exp_job_ids_unfinished | length > 0


- debug:
    msg="new_running_job_id={{ new_running_job_id| default('-')}}    pending={{ lsf_job_ids_pending }} running={{ lsf_job_ids_running }}"


##########################################################################
#   Wait and then check if experiment finished                           #
##########################################################################

- name: Sleep for X seconds before checking job status
  wait_for:
    timeout: "{{ exp_check_wait_time }}"
  when:
  - exp_job_ids_unfinished | length > 0
  - exp_check_wait_time > 0

- block:
    - include_role:
        name: experiment-job-status
  rescue:
    - set_fact:
        role_success: false
    - meta: clear_host_errors

- set_fact:
    is_cur_exp_finished: role_success|default(true)


##########################################################################
#   Create local directory and fetch results                         #
##########################################################################

- name: Fetch the results
  include_role:
    name: experiment-job-result
  vars:
    remote_results_dir: "{{  }}"
  when: is_cur_exp_finished


##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Update the job ids list (remove experiment from running)
  set_fact: 
    exp_job_ids_running: []
    exp_job_ids_unfinished: "{{ exp_job_ids_pending }}"
  when: is_cur_exp_finished

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save
  when: is_cur_exp_finished
