# - if running is empty: setup new experiment
#
- assert:
    that:
    - exp_job_ids_running is defined
    - experiments_ext is defined
    - run_id is defined
    - exp_check_wait_time is defined

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: exp_job_ids_unfinished | length == 0

- debug:
    var: exp_job_ids_running
- debug:
    var: experiments_ext
- debug:
    var: run_id
- debug:
    var: exp_check_wait_time



##########################################################################
#   Setup next (new) experiment run                                      #
##########################################################################

- name: 
  set_fact:
    new_running_job_id: null

- name: 
  set_fact:
    new_running_job_id: "{{ exp_job_ids_pending | list | first }}"
  when: exp_job_ids_running | length == 0

- debug:
    msg="!!! new_running_job_id={{ new_running_job_id }}"

- name:
  set_fact:
    exp_job_ids_pending: "{{ exp_job_ids_pending | reject('equalto', new_running_job_id) | list }}"
    exp_job_ids_running: "['{{ new_running_job_id }}']"
  when: new_running_job_id is not none 

- name: Set the experiment config
  set_fact:
    exp_config: "{{ experiments_ext[exp_job_ids_running | list | first | string | split('_')| first | int] }}"
    running_job_id: "{{ exp_job_ids_running[0]|string }}"

# TODO DELETE
- debug:
    msg: "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"

- debug:
    var: exp_config

- name: Set the experiment working directory
  set_fact:
    exp_working_dir: "{{ remote.dir }}/results/exp_{{ exp_id }}/run_{{ run_id }}/job_{{ running_job_id }}"
    exp_code_dir: "{{ remote.dir }}/code"


- name: Create results directory
  file:
    path: "{{ exp_working_dir }}/results"
    state: directory
    mode: 0755
    group: ubuntu
    owner: ubuntu
  delegate_to: "{{ host }}"
  loop: "{{ groups[exp_client.host_group] | union(groups[exp_server.host_group]) }}"
  loop_control:
    loop_var: host

- name: Create scratch directory
  file:
    path: "{{ exp_working_dir }}/scratch"
    state: directory
    mode: 0755
    group: ubuntu
    owner: ubuntu
  delegate_to: "{{ host }}"
  loop: "{{ groups[exp_client.host_group] | union(groups[exp_server.host_group]) }}"
  loop_control:
    loop_var: host

##########################################################################
#   Start a new experiment (as a service -> does not block)              #
##########################################################################

- name: Start new experiment (if there is no running atm)
  include_role:
    name: experiment-job-start
  when: new_running_job_id is not none


##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save


- debug:
    msg="new_running_job_id={{ new_running_job_id| default('-')}}    pending={{ exp_job_ids_pending }} running={{ exp_job_ids_running }}"

- name: Check if no unfinished jobs -> end role (play)
  meta: end_play
  when: exp_job_ids_unfinished | length == 0

##########################################################################
#   Wait and then check if experiment finished                           #
##########################################################################

- name: Sleep for X seconds before checking job status
  wait_for:
    timeout: "{{ exp_check_wait_time }}"
  when:
  - exp_check_wait_time > 0

- include_role:
    name: experiment-job-status
  vars:
    # TODO [nku] EXTRACT this here a s vars
    n_client_status_check: 1
    n_server_status_check: 1



##########################################################################
#   Create local directory and fetch results                         #
##########################################################################

- name: Fetch the results
  include_role:
    name: experiment-job-result
  vars:
    remote_results_dir: "{{ exp_working_dir }}/results"
    local_results_dir: results/exp_{{ exp_id }}/run_{{ run_id }}/job_{{ running_job_id }}
  when: is_cur_exp_finished


##########################################################################
#   Update experiment state                                              #
##########################################################################

- name: Update the job ids list (remove experiment from running)
  set_fact: 
    exp_job_ids_running: []
    exp_job_ids_unfinished: "{{ exp_job_ids_pending }}"
  when: is_cur_exp_finished


- name: Save the updated state of the experiment run (save job ids)
  include_role:
    name: experiment-state
  vars:
    expstate: save
  when: is_cur_exp_finished

