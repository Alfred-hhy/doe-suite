---

- assert:
    that:
    - exp is defined
    - id is defined
    - expstate == 'load' or expstate == 'save'
    - id == 'new' or id == 'last' or id|int > 0 

- name:
  set_fact:
    exp_name: "{{ exp }}"
    is_init: False

- name: Set exp id from command argument
  set_fact:
    exp_id: "{{ id }}"
  when: id != 'new' and id != 'last' and exp_id is not defined  # continue an experiment run


- name: Find all experiments state of the experiment with `exp`as name
  find:
    paths: "{{ local.exp_state_dir }}"
    patterns: "^{{ exp }}_\\d+$"
    file_type: directory
    use_regex: yes
  register: state_dirs_found
  when: id == 'last' and exp_id is not defined


- name: Select the experiment state with the highest exp_id (i.e., the most recent)
  set_fact:
    exp_id: "{{ state_dirs_found | json_query('files[*].path') | list | sort | last | string | split('_') | last }}"
  when: id == 'last' and exp_id is not defined # continue the last experiment run


- name: Create new exp id + Mark as init
  set_fact:
    is_init: True
    exp_id: "{{ ansible_date_time.epoch }}"
  when: id == 'new' and exp_id is not defined  # init experiment

- debug:
    msg="exp_name={{ exp_name }} exp_id={{ exp_id }}"

- name: Include the experiment variables
  include_vars: experiments/designs/{{ exp_name }}.yml
  when: is_init

- name: Init the experiment state by expanding the base_experiment with the varying params in the experiments
  set_fact:
    exp_runs_ext: "{{ exp_runs_ext | default([]) | union([base_experiment | combine( exp_item, recursive=True ) | combine({ '~FACTORS_LEVEL': { 'args': exp_item } }) ])}}"
    exp_job_ids: []
    exp_job_ids_unfinished: []
    exp_job_ids_pending: []
    exp_job_ids_running: []
  loop: "{{ factor_levels }}"
  when: is_init
  loop_control:
    loop_var: exp_item

- assert:
    that:
    - not '$FACTOR$' in (exp_runs_ext | string)
    fail_msg: "missing level for at least one factor in the experiment config (i.e., not all '$FACTOR$' are replaced)"
  when: is_init

- name: Create exp directory if it does not exist
  delegate_to: localhost
  file:
    path: "{{ local.exp_state_dir }}/{{ exp_name }}_{{ exp_id }}"
    state: directory
    mode:  0755
  when: is_init

- name: Save the Experiment State in the Run Directory
  delegate_to: localhost
  template:
    src: state.yml.j2
    dest: "{{ local.exp_state_dir }}/{{ exp_name }}_{{ exp_id }}/state.yml"
    mode:  0755
  when: expstate == 'save' or is_init

- name: Load Experiment State
  include_vars: # Be careful: any variables you set with set_fact will not be overwritten with include_vars due to the variable precedence of different sources in Ansible.
    file: "{{ local.exp_state_dir }}/{{ exp_name }}_{{ exp_id }}/state.yml"
    name: state
  when: expstate == 'load' and not is_init
  
- name: Set variables (facts) based on loaded state
  set_fact:
    exp_runs_ext: "{{ state.exp_runs_ext }}"
    exp_job_ids: "{{ state.exp_job_ids }}"
    exp_job_ids_unfinished: "{{ state.exp_job_ids_unfinished }}"
    exp_job_ids_pending: "{{ state.exp_job_ids_pending }}"
    exp_job_ids_running: "{{ state.exp_job_ids_running }}"
    n_repetitions: "{{ state.n_repetitions }}"
  when: expstate == 'load' and not is_init
  