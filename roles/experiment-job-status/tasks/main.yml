---

- assert:
    that:
    - exp_client.n_hosts_status_check is defined
    - exp_server.n_hosts_status_check is defined
    - exp_client.n_hosts_status_check <= groups[exp_client.host_group] | default([]) | length
    - exp_server.n_hosts_status_check <= groups[exp_server.host_group] | default([]) | length

- name: Check if Experiment is Still Running (on clients)
  delegate_to: "{{ groups[exp_client.host_group][idx] }}"
  service_facts:
  register: services_state_clients
  when: exp_job_ids_unfinished | length > 0 and exp_client.n_hosts_status_check > 0
  loop: "{{ range(0, exp_client.n_hosts_status_check, 1)|list }}"
  loop_control:
    loop_var: idx


- name: Check if Experiment is Still Running (on servers)
  delegate_to: "{{ groups[exp_server.host_group][idx] }}"
  service_facts:
  register: services_state_servers
  when: exp_job_ids_unfinished | length > 0 and exp_server.n_hosts_status_check > 0
  loop: "{{ range(0, exp_server.n_hosts_status_check, 1)|list }}"
  loop_control:
    loop_var: idx


- name: Check if current running experiment finished
  set_fact:
    clients_stopped:  "{{ 'running' not in services_state_clients| default([]) | json_query(c_query) | list }}"
    servers_stopped:  "{{ 'running' not in services_state_servers| default([]) | json_query(s_query) | list }}"
    #clients_stopped_debug:  "{{  services_state_clients| default([]) | json_query(c_query) | list }}"
    #servers_stopped_debug:  "{{  services_state_servers| default([]) | json_query(s_query) | list }}"
  vars:
    c_query: 'results[*].ansible_facts.services."{{ prj_id }}client.service".state'
    s_query: 'results[*].ansible_facts.services."{{ prj_id }}server.service".state'

- set_fact:
    is_cur_exp_finished: "{{ clients_stopped and servers_stopped }}"